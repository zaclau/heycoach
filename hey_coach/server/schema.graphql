
# V2 - central user collection (private), seperate profile collections (safe for public)
############################################
# TYPES
############################################

scalar DateTime  # referencing GraphQL Scalars package, https://the-guild.dev/graphql/scalars/docs/usage
scalar LocalTime

#################
# PEOPLE objects 
#################

type User{
    _id: ID!
    email: String!
    firstName: String!
    lastName: String
    profilePicture: String # TODO what is the type for images

    # TOKENS
    googleOuthToken: String
    stripeCustomerId: String

    # LOGS
    loggedCreatedAt: DateTime

    # FLAGS - used to init UI
    isCoach: Boolean
    isCoachee: Boolean

    # Profiles
}

type PreferredTimeSlot{
    start: LocalTime  # Format: "HH:mm"
    end: LocalTime
}

type PreferredDay {
    day: String
    slots: [PreferredTimeSlot]
}

type ProfileOfCoach {
    # Primary Key is ID, not object. This is for security.
    userId: ID!
    coachText: String!
    tagsOfSpecialties: [String]
    sessionSlotsAvailable: [PreferredDay]
    sessionDuration: Int!
    sessionPrice: Float!

    # TODO: add in average review score
    # TODO: add in total sessions
}

enum SessionGoal {
    StrengthBuilding
    EnduranceBuilding
    AgilityBuilding
    FatBurn
    Wellness
    MentalFocus
}

type ProfileOfCoachee {
    userId: ID!
    sessionSlotsPreferred: [PreferredDay]
    tagsOfGoals: [SessionGoal]! # can link to GPT3.5 or vector search later to match with coach type
}

###############
# EVENT objects
###############

type CoachingSession {
    _id: ID!

    # Participant References
    coachId: ID!           # Reference to the coach's ID
    coacheeId: ID!         # Reference to the coachee's ID

    # Session Details
    dateTime: DateTime!    # Date and time of the coaching session
    status: StatusOfSession! # Status of the session (Scheduled, Cancelled, Completed, etc.)
    location: String       # Location of the session
    googleCalendarEventId: String # ID for the event in Google Calendar or other scheduling solutions

    # Financial Information
    receipt: [Receipt]       # Receipt information for the session

    # Post-Session Review
    review: Review  # Review of the session (nullable, as it's post-session data)
}

type Receipt {
    stripeId: String!
    amount: Float!
    status: StatusOfPayment!
}

type Review {
    text: String!
    rating: Int!
    createdAt: DateTime!
}

enum StatusOfSession {
    SCHEDULED
    CANCELLED
    COMPLETED
}

enum StatusOfPayment {
    PENDING
    COMPLETED
    FAILED
}


############################################
# INPUTS
############################################

input InputUser {
    email: String!
    password: String
    firstName: String!
    lastName: String
    description: String
    profilePictureUrl: String
}

input InputCoachProfile {
    userId: ID!
    tagsOfSpecialties: [String]
    sessionSlotsAvailable: [InputPreferredDay]
    sessionDuration: Int
    sessionPrice: Float
}

input InputCoacheeProfile {
    userId: ID!
    sessionSlotsPreferred: [InputPreferredDay]
    sessionGoals: [SessionGoal]
}

input InputPreferredDay {
    day: String
    slots: [InputPreferredTime]
}

input InputPreferredTime {
    start: String  # Format: "HH:mm"
    end: String
}

input InputCoachSession {
    coachId: ID!
    coacheeId: ID!
    dateTime: DateTime! # using graphql-scalars
    location: String
}

input InputReview {
    id: ID!
    session: InputCoachSession!
    text: String!
    rating: Int!
    createdAt: DateTime!
}


############################################
# Queries
############################################

type Query {
    
    ################
    # User Queries
    ################

    getUserByEmail(email: String!): User  # implemented
    getUserById(id: ID!): User  # implemented
    getAllUsers: [User]  # implemented
    getAllCoaches: [User]  # implemented
    getAllCoachees: [User]  # implemented

    ################
    # Coach and Coachee Profile Queries
    ################

    getAllCoachProfiles: [ProfileOfCoach]
    getAllCoacheeProfiles: [ProfileOfCoachee]
    getCoachProfile(userId: ID!): ProfileOfCoach
    getCoacheeProfile(userId: ID!): ProfileOfCoachee

    ################
    # Session Queries
    ################

    getAllSessions: [CoachingSession]  # implemented
#    getAllReviews: [Review]  # implemented - reomoved with new schema
#    getAllReceipts: [Receipt]  # implemented - removed with new schema
    getSessionById(sessionId: ID!): CoachingSession
#    getReceiptById(receiptId: ID!): Receipt  # removed with new schema
#    getReviewById(receiptId: ID!): Receipt  # removed with new schema

    # by people
    getAllSessionsForUser(userId: ID!): [CoachingSession]  # implemented


    # Scheduling Queries
    # pending 

    # Additional and Modified Queries as per your requirements
    # pending
}


############################################
# MUTATIONS
############################################

#type Mutation {
#    signUpUser(newUser: UserInput!): User
#    updateUserProfile(userId: ID!, updatedProfile: UserProfileInput!): User
#    bookSession(sessionInput: SessionInput!): Session
#    cancelSession(sessionId: ID!): Session
#    submitReview(sessionId: ID!, review: String!, rating: Int!): Review
#}
#
