
# V2 - central user collection (private), seperate profile collections (safe for public)
############################################
# TYPES
############################################


#################
# PEOPLE objects 
#################

type User{
    id: ID! 
    email: String!
    firstName: String!
    lastName: String
    description: String
    profilePictureUrl: String

    # TOKENS
    googleOuthToken: String
    stripeCustomerId: String

    # FLAGS - used to init UI
    isCoach: Boolean
    isCoachee: Boolean
}

type PreferredTimeSlot {
    start: String  # Format: "HH:mm"
    end: String 
}

type PreferredDay {
    day: String
    slots: [PreferredTimeSlot]
}

type ProfileOfCoach {
    # Primary Key is ID, not object. This is for security.
    userId: ID!
    coachText: String!
    tagsOfSpecialties: [String]
    sessionSlotsAvailable: [PreferredDay]
    sessionDuration: Int!
    sessionPrice: Float!

}

enum SessionGoal {
    StrengthBuilding
    EnduranceBuilding
    AgilityBuilding
    FatBurn
    Wellness
    MentalFocus
}

type ProfileOfCoachee {
    userId: ID!
    sessionSlotsPreferred: [DaySchedule]
    tagsOfGoals: [SessionGoal]! # can link to GPT3.5 or vector search later to match with coach type
}

###############
# EVENT objects
###############

type CoachingSession {
    id: ID!

    # Participant References
    coachId: ID!           # Reference to the coach's ID
    coacheeId: ID!         # Reference to the coachee's ID

    # Session Details
    dateTime: DateTime!    # Date and time of the coaching session
    status: StatusOfSession! # Status of the session (Scheduled, Cancelled, Completed, etc.)
    location: String       # Location of the session
    googleCalendarEventId: String # ID for the event in Google Calendar or other scheduling solutions

    # Financial Information
    receipt: Receipt       # Receipt information for the session

    # Post-Session Review
    review: SessionReview  # Review of the session (nullable, as it's post-session data)
}

type Receipt {
    id: ID!
    stripeId: String!
    amount: Float!
    status: StatusOfPayment!
}

type SessionReview {
    id: ID!
    session: CoachingSession!
    text: String!
    rating: Int!
    createdAt: DateTime!
}

enum StatusOfSession {
    SCHEDULED
    CANCELLED
    COMPLETED
}

enum StatusOfPayment {
    PENDING
    COMPLETED
    FAILED
}


############################################
# INPUTS
############################################

input UserInput {
    email: String!
    password: String
    firstName: String!
    lastName: String
    description: String
    profilePictureUrl: String
}

input CoachProfileInput {
    userId: ID!
    tagsOfSpecialties: [String]
    sessionSlotsAvailable: [PreferredDayInput]
    sessionDuration: Int
    sessionPrice: Float
}

input CoacheeProfileInput {
    userId: ID!
    sessionSlotsPreferred: [PreferredDayInput]
    sessionGoals: [SessionGoal]
}

input PreferredDayInput {
    day: String
    slots: [PreferredTimeSlotInput]
}

input PreferredTimeSlotInput {
    start: String  # Format: "HH:mm"
    end: String
}

input SessionInput {
    coachId: ID!
    coacheeId: ID!
    dateTime: DateTime!
    location: String
}


input ReviewInput {
    id: ID!
    session: CoachingSession!
    text: String!
    rating: Int!
    createdAt: DateTime!
}


############################################
# Queries
############################################

type Query {
    
    ################
    # User Queries
    ################

    getUser(email: String!): User
    getUserById(id: ID!): User
    getAllUsers: [User]
    getSessionsForUser(userId: ID!): [Session]

    ################
    # Coach and Coachee Profile Queries
    ################

    getAllCoachProfiles: [ProfileOfCoach]
    getAllCoacheeProfiles: [ProfileOfCoachee]
    getCoachProfile(userId: ID!): ProfileOfCoach
    getCoacheeProfile(userId: ID!): ProfileOfCoachee

    ################
    # Session Queries
    ################

    getCoachingSessionById(id: ID!): CoachingSession
    getSessionsForCoach(coachId: ID!): [CoachingSession]
    getSessionsForCoachee(coacheeId: ID!): [CoachingSession]
    getSessionDetails(sessionId: ID!): Session
    getReceiptDetails(receiptId: ID!): Receipt

    # Scheduling Queries
    # pending 

    # Additional and Modified Queries as per your requirements
    # pending
}


############################################
# MUTATIONS
############################################

type Mutation {
    signUpUser(newUser: UserInput!): User
    updateUserProfile(userId: ID!, updatedProfile: UserProfileInput!): User
    bookSession(sessionInput: SessionInput!): Session
    cancelSession(sessionId: ID!): Session
    submitReview(sessionId: ID!, review: String!, rating: Int!): Review
}

